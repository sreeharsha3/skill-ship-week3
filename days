
day-1

1.gcd and lcm code

#include <iostream>
using namespace std;
long gcd(long,long); //declared

//def
long gcd(long a,long b){
    if(b==0){
        return a;
    }
    else{
        return gcd(b,a%b);
    }
}

int main() {
	int t;
	cin>>t;
	while(t--){
	    
	    long a,b,lcm,gcdd;
	    cin>>a>>b;
	    gcdd=gcd(a,b);
	    lcm=(a*b)/gcdd;
	    cout<<lcm<<" "<<gcdd<<endl;
	    
	}
	return 0;
}

2. sieve of eratosthenes code

#include <bits/stdc++.h>
using namespace std;

int main() {
	int t;
	cin>>t;
	while(t--){
	    int n,i,j,k,l;
	    cin>>n;
	    int primes[n+1];
	    for(i=0;i<=n;i++){
	        primes[i]=1;
	    }
	    primes[0]=0;
	    primes[1]=0;
	    for(j=2;j<=sqrt(n);j++){
	        if(primes[j]==1){
	            for(k=2;k*j<=n;k++){
	                primes[k*j]=0;
	            }
	        }
	    }
	    for(l=0;l<=n+1;l++){
	        if(primes[l]==1){
	            cout<<l<<" ";
	        }
	    }
	    cout<<endl;
	}
	return 0;
}

3. (a^b/c)%m code

#include <iostream>
using namespace std;
long long int d, z, y;
long long int modularExponentiation(long long int x,long long int n,long long int M)
{
    long long int result=1;
    while(n>0)
    {
        if(n % 2 ==1)
        result=(result * x)%M;
        x=(x*x)%M;
        n=n/2;
    }
    return result;
}
void extendedEuclid(long long int c,long long int m)
{
    if(m == 0)
    {
        d = c;
        z = 1;
        y = 0;
    }
    else
    {
        extendedEuclid(m, c%m);
        long long int temp = z;
        z = y;
        y = temp - (c/m)*y;
    }
}
long long int modInverse(int c, int M)
{
    extendedEuclid(c,M);
    return (z%M+M)%M;
}
int main()
{
    long long int a,b,c,m,ans1,ans2;
    cin>>a>>b>>c>>m;
    ans1=modularExponentiation(a,b,m);
    ans2=modInverse(c,m);
    cout<<((ans1%m)*(ans2%m))%m;
    return 0;
}

day-2

1.totient function code

#include<bits/stdc++.h>

using namespace std;

int main()
{
	int n,p,res;
	cin>>n;
	res=n;
	for(p=2;p*p<=(n);++p){
		if(n%p==0){
			while(n%p==0){
				n=n/p;
			}
			res=res-(res/p);


		}
	}
	if(n>1){
		res=res-(res/n);
	}
	cout<<res;
	return 0;
}

2.Finding middle element in a linked list code

/* Should return data of middle node. If linked list is empty, then  -1*/
int getMiddle(Node *head)
{
   // Your code here
   Node* temp=head;int cnt=1;
   while(temp->next != NULL){
       temp=temp->next;
       cnt=cnt+1;
   }
   if(cnt%2!=0){
       Node* temp1=head;
       for(int j=0;j<((cnt+1)/2)-1;j++){
           temp1=temp1->next;
       }
       return temp1->data;
   }
   else{
       Node* temp2=head;
       for(int j=0;j<(cnt/2);j++){
           temp2=temp2->next;
       }
       return temp2->data;
   }
}


3.loop detection (floyd's cycle finding algorithm)

int detectloop(Node *head) {

    // your code here
    Node* slow=head;Node* fast=head;
    while(slow && fast && fast->next){
        slow=slow->next;
        fast=fast->next->next;
        if(slow==fast){
            return 1;
        }
    }
    return 0;
    
    
    
}

4. length of loop in linked list code

int countNodesinLoop(struct Node *head)
{
     // Code here
     Node* small=head;
     Node* big=head;
     while(small && big && big->next){
         small=small->next;
         big=big->next->next;
         if(small==big){
             int res = 1;  
             Node *temp = small;  
             while (temp->next != small)  
             {  
                 res++;  
                 temp = temp->next;  
             }  
             return res; 
         }
     }
     return 0;
}

5. Nth node from end of linked list code.

int getNthFromLast(Node *head, int n)
{
       // Your code here
       Node* temp=head;Node* temp1=head;
       int cnt=1;
       while(temp->next!=0){
           temp=temp->next;
           cnt=cnt+1;
       }
       if(cnt>=n){
           for(int i=1;i<=(cnt-n);i++){
               temp1=temp1->next;
           }
           return temp1->data;
       }
       else{
           return -1;
       }
}

day-3

1. even and odd segregation

#include<bits/stdc++.h>
using namespace std;
struct Node
{
    int data;
    Node *next;
};
Node* insert(Node *head,int data)
{
    Node *temp=new Node();
    temp->data=data;
    temp->next=NULL;
    Node *last=head;
    if(head==NULL)
    {
        head=temp;
        return head;
    }
    while(last->next!=NULL)
      last=last->next;
    last->next=temp; 
    return head;
}
void print(Node *head)
{
    while(head)
    {
        cout<<head->data<<" ";
        head=head->next;
    }
    cout<<endl;
}
int main()
 {
	int t;
	cin>>t;
	while(t--)
	{
	    int n,x;
	    cin>>n;
	    Node *odd=NULL,*even=NULL;
	    for(int i=0;i<n;i++)
	    {
	        cin>>x;
	        if(x%2==0)
	            even=insert(even,x);
	        else
	            odd=insert(odd,x);
	    }
	    if(!even)
	       print(odd);
	    else{
	    Node *temp=even;
	    while(temp->next)
	        temp=temp->next;
	    temp->next=odd;
	    print(even);}
	}
	return 0;
}

2. reverse linked list code:

Node* reverseList(Node *head)
{
  // Your code here
  Node* temp=head;Node* nxt;
  Node*prev=NULL;
  while(temp!=NULL){
      nxt=temp->next;
      temp->next=prev;
      prev=temp;
      temp=nxt;
  }
  head=prev;
  return head;
}




